<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[代码压缩]]></title>
    <url>%2FMyBlogs%2F2015%2F11%2F18%2F%E4%BB%A3%E7%A0%81%E5%8E%8B%E7%BC%A9%2F</url>
    <content type="text"><![CDATA[什么是代码压缩 Web性能优化最佳实践中最重要的一条是减少HTTP请求。而减少HTTP请求的最主要的方式就是，合并并压缩JavaScript和CSS文件。 关于编写css时，我们应注意通过一些细节来控制css文件的大小，比如：全局样式、继承样式、缩写样式，空格、注释等。 同时你也可以通过在线工具对你的css文件进行压缩，来减少css文件的大小，但压缩后的css文件在可维护性、识别性方面变的特别弱。 但更复杂的情况是，如果你的页面里面引用了多个css、多个js文件时就可能处理不好。 代码压缩的几大好处： 页面加载的时候只请求程序合并压缩后的c.css文件，这就减少了http对css文件的请求次数！ 不用对a.css和b.css进行压缩，保持了a.css和b.css的易编辑性、易识别性。 压缩：删除Javascript代码中所有的注释、跳转符号、换行符号及无用的空格，从而压缩了JS文件的大小。 混淆：经过编码将变量和函数原命名改为毫无意思的命名，以防他人窥视和窃取源代码。 这样做的几大坏处： 你需要解压工具才能打开文件。 如果压缩文件有损坏的话，可能是整个文件都受影响。 压缩的时候必须要注意以下几点： 压缩前的代码格式要标准。因为去掉换行与空格时，所有语句就变成一行了，如果你的代码有瑕疵（比如某行少了个分号），那就会导致整个文件报错。当然，现在有的压缩工具已经比较智能了。 备份原文件 压缩很可能不会一次成功，一般要多试，多改 工具 webpack gulp]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS精灵]]></title>
    <url>%2FMyBlogs%2F2015%2F08%2F11%2Fcss%E7%B2%BE%E7%81%B5%2F</url>
    <content type="text"><![CDATA[什么是CSS精灵 CSS Sprites在国内很多人叫css 精灵，是一种网页图片应用处理方式。 就是把网页中一些背景图片整合到一张图片文件中。 利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字能精确的定位出背景图片的位置。 这样处理图片后，当访问该页面时，载入的图片就不会像以前那样一幅一幅地慢慢显示出来了。 将图片整合之后只需要加载一张或几张图片，就可以渲染浏览器内的大部分小图片。 CSS Sprites 的优点： 减少图片的字节 减少了网页的http请求，从而大大的提高了页面的性能3 .解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。4 .更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。 CSS Sprites 的缺点： 在图片合并的时候，你要把多张图片有序的合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景；这些还好，最痛苦的是在宽屏，高分辨率的屏幕下的自适应页面，你的图片如果不够宽，很容易出现背景断裂； CSS Sprites在维护的时候比较麻烦，如果页面背景有少许改动，一般就要改这张合并的图片，无需改的地方最好不要动，这样避免改动更多的css，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动css。]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解BFC和Margin Collapse]]></title>
    <url>%2FMyBlogs%2F2015%2F07%2F08%2FBFC%2F</url>
    <content type="text"><![CDATA[什么是BFC（Block formatting contexts）首先我们来看看w3c规范对BFC的解释，其实对于这种概念的学习上，我们总是建议首先寻找官方的定义，因为原则上来说官方的才是最权威和正确的，而且还比较详细，千万不要因为看到英文就畏惧不前。 w3c规范中的BFC定义：浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。 在BFC中，盒子从顶端开始垂直地一个接一个地排列，两个盒子之间的垂直的间隙是由他们的margin 值所决定的。在一个BFC中，两个相邻的块级盒子的垂直外边距会产生折叠。 在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。 BFC的通俗理解：首先BFC是一个名词，是一个独立的布局环境，我们可以理解为一个箱子（实际上是看不见摸不着的），箱子里面物品的摆放是不受外界的影响的。转换为BFC的理解则是：BFC中的元素的布局是不受外界的影响（我们往往利用这个特性来消除浮动元素对其非浮动的兄弟元素和其子元素带来的影响。）并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。 BFC的运用在w3c的规范中，除了上面的一段定义之外，BFC的相关知识点分布地比较零散，但基本集中在float、绝对定位、margin collaspe中。下面我们来看看如何应用到BFC来解决问题。 在很多网站中，我们经常会看到这样的一种，左边图片+右边信息的两栏结构，下面我们来看看如何利用BFC来实现。 首先我们给出这样的结构： 123456789//CSS.box &#123;width:210px;border: 1px solid #000;float: left;&#125;.img &#123;width: 100px;height: 100px;background: #696;float: left;&#125;.info &#123;background: #ccc;color: #fff;&#125;//HTML&lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;img&quot;&gt;image&lt;/div&gt; &lt;p class=&quot;info&quot;&gt;信息信息信息信息信息信息信息信息信息信息信息信&lt;/p&gt;&lt;/div&gt; 一般情况下它呈现出我们所乐意看到的样子： 但随着文字信息增多后，会变地非常的糟糕： 很明显，这是因为info类里面的文字受到了浮动元素的影响，但这并不是我们所期望的。此时我们可以为P元素的内容建立一个BFC，让其内容消除对外界浮动元素的影响。根据上文所知，只要给info元素添加overflow:hidden;即可为其内容建立新的BFC。当然你也可以通过其他方法来建立。其效果如下： 合并外边距与BFC在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。 折叠的结果： 两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。 两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。 两个外边距一正一负时，折叠结果是两者的相加的和。 产生折叠的必备条件：margin必须是邻接的!而根据w3c规范，两个margin是邻接的必须满足以下条件： 必须是处于常规文档流（非float和绝对定位）的块级盒子,并且处于同一个BFC当中。 没有线盒，没有空隙（clearance，下面会讲到），没有padding和border将他们分隔开 都属于垂直方向上相邻的外边距，可以是下面任意一种情况 元素的margin-top与其第一个常规文档流的子元素的margin-top 元素的margin-bottom与其下一个常规文档流的兄弟元素的margin-top height为auto的元素的margin-bottom与其最后一个常规文档流的子元素的margin-bottom 高度为0并且最小高度也为0，不包含常规文档流的子元素，并且自身没有建立新的BFC的元素的margin-top和margin-bottom 以上的条件意味着下列的规则： 创建了新的BFC的元素（例如浮动元素或者’overflow’值为’visible’以外的元素）与它的子元素的外边距不会折叠 浮动元素不与任何元素的外边距产生折叠（包括其父元素和子元素） 绝对定位元素不与任何元素的外边距产生折叠 inline-block元素不与任何元素的外边距产生折叠 一个常规文档流元素的margin-bottom与它下一个常规文档流的兄弟元素的margin-top会产生折叠，除非它们之间存在间隙（clearance）。 一个常规文档流元素的margin-top 与其第一个常规文档流的子元素的margin-top产生折叠，条件为父元素不包含 padding 和 border ，子元素不包含 clearance。 一个 ‘height’ 为 ‘auto’ 并且 ‘min-height’ 为 ‘0’的常规文档流元素的 margin-bottom 会与其最后一个常规文档流子元素的 margin-bottom 折叠，条件为父元素不包含 padding 和 border ，子元素的 margin-bottom 不与包含 clearance 的 margin-top 折叠。 一个不包含border-top、border-bottom、padding-top、padding-bottom的常规文档流元素，并且其 ‘height’ 为 0 或 ‘auto’， ‘min-height’ 为 ‘0’，其里面也不包含行盒(line box)，其自身的 margin-top 和 margin-bottom 会折叠。（下面我们对不产生折叠的情况逐一分析。） 浮动和绝对定位不与任何元素产生 margin 折叠原因：浮动元素和绝对定位元素不与其他盒子产生外边距折叠是因为元素会脱离当前的文档流，违反了上面所述的两个margin是邻接的条件同时，又因为浮动和绝对定位会使元素为它的内容创建新的BFC，因此该元素和子元素所处的BFC是不相同的，因此也不会产生margin的折叠。 DEMO： 12345678910111213141516171819202122//CSSbody &#123;padding:0;margin: 0; text-align: center;&#125;.wrapper &#123;margin:30px;width: 450px;border:1px solid red;&#125;.small-box &#123;width: 50px;height: 50px;margin: 10px;background: #9cc;&#125;.middle-box &#123;width: 100px;height: 100px;margin: 20px;background: #99c;&#125;.big-box &#123;width: 120px;height: 120px;margin: 20px;background: #33e;&#125;.floatL &#123;float: left;&#125;.floatR &#123;float: right;&#125;.clear &#123;clear: both;&#125;.posA &#123;position: absolute;&#125;.overHid&#123;overflow: hidden;&#125;.red &#123;background: #f00;&#125;.green &#123;background: #0f0;&#125;.blue &#123;background: #00f;&#125;//HTML&lt;div class=&quot;wrapper overHid&quot;&gt; &lt;div class=&quot;big-box blue&quot;&gt;non-float&lt;/div&gt; &lt;div class=&quot;middle-box green floatL&quot;&gt; &lt;div class=&quot;small-box red&quot;&gt;&lt;/div&gt; float left &lt;/div&gt;&lt;/div&gt; 但是浮动元素脱离了当前的BFC并不影响它后面的兄弟元素，后面的兄弟元素与浮动元素前面的元素依然在同一个BFC当中，所以，它们之间的margin还是会折叠的。下面我们对上面的demo做一下修改： 12345&lt;div class=&quot;wrapper overHid&quot;&gt; &lt;div class=&quot;big-box&quot;&gt;non-float&lt;/div&gt; &lt;div class=&quot;middle-box green floatL&quot;&gt;float left&lt;/div&gt; &lt;div class=&quot;middle-box red&quot;&gt;non-clear&lt;/div&gt;&lt;/div&gt; 从上面这个修改后的demo中可以看出，红色的块盒在没有清楚浮动的情况下，它的margin-top和蓝色块盒的margin-bottom产生了折叠，这证明了我上面的结论。 下面我们来谈谈 ‘clearance’ 这个神奇的东西，当浮动元素之后的元素设置clear以闭合相关方向的浮动时，根据w3c规范规定，闭合浮动的元素会在其margin-top以上产生一定的空隙（clearance，如下图），该空隙会阻止元素margin-top的折叠，并作为间距存在于元素的margin-top的上方。关于这个间距的计算稍微有点复杂，但实际工作中你并不需要去计算它，我们先来看看例子吧： 12345&lt;div class=&quot;wrapper overHid&quot;&gt; &lt;div class=&quot;big-box&quot; style=&quot;box-shadow:0 20px 0 rgba(0,0,255,0.2);&quot;&gt;non-float&lt;/div&gt; &lt;div class=&quot;middle-box green floatL&quot; style=&quot;opacity:0.6&quot;&gt;float left&lt;/div&gt; &lt;div class=&quot;middle-box red clear&quot; style=&quot;margin-top:40px;box-shadow:0 -40px 0 rgba(255,0,0,0.2);&quot;&gt;clear&lt;/div&gt;&lt;/div&gt; 上面的图中我们可以看到，我们为红色块盒设置的40px的margin-top（这里我们通过相同高度的阴影来将其可视化）好像并没有对紫色块盒起作用，而且无论我们怎么修改这个margin-top值都不会影响红色块盒的位置，而只由绿色块盒的margin-bottom所决定。 也就是说，我们只需要知道，闭合浮动的元素的border-top会紧贴着相应的浮动元素的margin-bottom。 原来，通过w3c的官方规范可知，闭合浮动的块盒在margin-top上所产生的间距（clearance）的值与该块盒的margin-top之和应该足够让该块盒垂直的跨越浮动元素的margin-bottom，使闭合浮动的块盒的border-top恰好与浮动元素的块盒的margin-bottom相邻接。 用上图例子中的相关值可以得出这样一个式子：r-margin-top + r-clearance = g-margin-top + g-height + g-margin-bottom PS！闭合浮动并不能使浮动元素回到原来的BFC当中！ 分析二：inline-block元素与其兄弟元素、子元素和父元素的外边距都不会折叠（包括其父元素和子元素）inline-block不符合w3c规范所说元素必须是块级盒子的条件，因为规范中又说明，块级盒子的display属性必须是以下三种之一：’block’， ‘list-item’， 和 ‘table’。 原文: http://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html © w3cplus.com]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>BFC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML5 初解]]></title>
    <url>%2FMyBlogs%2F2015%2F05%2F19%2FHTML5%E5%88%9D%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[什么是HTML5 万维网的核心语言、标准通用标记语言下的一个应用超文本标记语言（HTML）的第五次重大修改 设计目的 HTML5的设计目的是为了在移动设备上支持多媒体。 新的语法特征被引进以支持这一点，如video、audio和canvas 标记。 HTML5还引进了新的功能，可以真正改变用户与文档的交互方式。 同时使代码更加的语义化 PS：也就是说在以前的HTML并不会支持不同的媒体设备，而HTML5的设计目的就是这个。 HTML5的优点及缺点优点 提高可用性和改进用户的友好体验； 有几个新的标签，这将有助于开发人员定义重要的内容； 可以给站点带来更多的多媒体元素(视频和音频)； 可以很好的替代FLASH和Silverlight； 当涉及到网站的抓取和索引的时候，对于SEO很友好； 将被大量应用于移动应用程序和游戏； 可移植性好。 缺点 浏览器的兼容，因浏览器的兼容造成了用户体验不佳。 发展趋势 HTML5规范开发完成时，将成为主流。 未来可能的趋势 移动优先 游戏开发者领衔“主演” 总结 HTML5的出现实现了HTML自己的自适应设计 同时新增了很多标签，都是特别的强大，如：&lt;video&gt; 新增了许多事件属性 当然HTML到HTML5之间还有一个版本XHTML（w3c关于XHTML的文档:http://w3school.com.cn/xhtml/index.asp）]]></content>
      <categories>
        <category>学习小结</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 响应式布局]]></title>
    <url>%2FMyBlogs%2F2015%2F05%2F12%2FHTML%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[什么是响应式布局 什么是响应式 Web 设计？ RWD 指的是响应式 Web 设计（Responsive Web Design） RWD 能够以可变尺寸传递网页 RWD 对于平板和移动设备是必需的 PS：响应式布局是为了让自己的页面适应不同的设备，如：手机，ipad，电脑之类的设备。体现在不同的设备视口大小不同的页面设计。 BootStrap BootStrap是一个css样式库 这是专门为了响应式布局而设计的样式库 详情请去BootStrap官网查询: http://v3.bootcss.com/ 小结 随着时代的发展手机的普及，作为开发设计的前端，为了更好的与用户的交互，从最初的电脑逐渐的转向到移动设备。 为了网页适应不同的设备（也就是不同的视口大小），出现了响应式设计。 关于HTML的总结 HTML是超文本标记语言 由书写标签代码来设计网页 遇到的困难：最初的就是块的概念，以及每个标签的用处。 HTML的学习基础就先到这了，接下来学习HTML5新增的标签和属性。（加油）]]></content>
      <categories>
        <category>学习小结</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 初解（表格，列表，块）]]></title>
    <url>%2FMyBlogs%2F2015%2F04%2F29%2FHTML%E5%88%9D%E8%A7%A32%2F</url>
    <content type="text"><![CDATA[HTML表格，列表，块 列表的写法 表格的写法 块的概念和运用 HTML表格定义表格 使用 &lt;table&gt; 标签来定义 每个表格均有若干行（由 &lt;tr&gt; 标签定义） 每行被分割为若干单元格（由 &lt;td&gt; 标签定义） 字母 td 指表格数据（table data），即数据单元格的内容。 数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。 &lt;table border=&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt;row 1, cell 1&lt;/td&gt; &lt;td&gt;row 1, cell 2&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;row 2, cell 1&lt;/td&gt; &lt;td&gt;row 2, cell 2&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; PS：table也有默认属性，如：border设置表格的边框，注意td是被tr所包裹，也就是说先有行，再有列。 表格的标准形式&lt;table&gt; &lt;thead&gt; &lt;th&gt; &lt;td&gt;表格页眉的表头&lt;/td&gt; &lt;td&gt;表格页眉中的内容&lt;/td&gt; &lt;/th&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;表格内容1&lt;/td&gt; &lt;td&gt;表格内容2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;表格的脚步内容1&lt;/td&gt; &lt;td&gt;表格的脚步内容2&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt; PS：表格中table属性设置Cellpadding和Cellspacing属性作用 Cellpadding控制单元格内容与其边框之间的空白 Cellspacing设置单元格之间的距离 列表 html中的列表分为两种：有序列表和无序列表以及自定义列表 有序列表 无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。 无序列表始于 &lt;ul&gt; 标签。每个列表项始于 &lt;li&gt; 标签。 &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ul&gt; PS：列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。 有序列表 同样，有序列表也是一列项目，列表项目使用数字进行标记。 有序列表始于 &lt;ol&gt; 标签。每个列表项始于 &lt;li&gt; 标签。 &lt;ol&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt; &lt;/ol&gt; PS：列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。 自定义列表 自定义列表不仅仅是一列项目，而是项目及其注释的组合。 自定义列表以 &lt;dl&gt; 标签开始。每个自定义列表项以 &lt;dt&gt; 开始。每个自定义列表项的定义以 &lt;dd&gt; 开始。 &lt;dl&gt; &lt;dt&gt;Coffee&lt;/dt&gt; &lt;dd&gt;Black hot drink&lt;/dd&gt; &lt;dt&gt;Milk&lt;/dt&gt; &lt;dd&gt;White cold drink&lt;/dd&gt; &lt;/dl&gt; PS：列表项内部可以使用段落、换行符、图片、链接以及其他列表等等。 自定义列表写法规范：一个dt为标题可以对多个dd，但是一dd不能对多个dt。 块 大多数 HTML 元素被定义为块级元素或内联元素。 “块级元素”译为 block level element，“内联元素”译为 inline element。 HTML 块元素-块级元素在浏览器显示时，通常会以新行来开始（和结束）。例子：&lt;h1&gt;, &lt;p&gt;,&lt;ul&gt;, &lt;table&gt; HTML 内联元素 内联元素在显示时通常不会以新行开始。例子：&lt;b&gt;, &lt;td&gt;, &lt;a&gt;, &lt;img&gt; HTML div 元素 PS：及其重要的一个标签，通过div标签和css样式来作为整个网页的布局 HTML &lt;div&gt; 元素是块级元素，它是可用于组合其他 HTML 元素的容器。 &lt;div&gt; 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。 如果与 CSS 一同使用，&lt;div&gt; 元素可用于对大的内容块设置样式属性。 &lt;div&gt; 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 &lt;table&gt; 元素进行文档布局不是表格的正确用法。&lt;table&gt; 元素的作用是显示表格化的数据。 HTML span 元素 PS：&lt;span&gt; 标签用于包裹文字，联合css使用控制字体样式 HTML &lt;span&gt; 元素是内联元素，可用作文本的容器。 &lt;span&gt; 元素也没有特定的含义。 当与 CSS 一同使用时，&lt;span&gt; 元素可用于为部分文本设置样式属性。 总结 所有的html元素可以分为内联元素和块级元素 块级元素都是独占一行 表格和列表都是展示数据的 div加上css很重要，后期两者一起使用，做到页面布局和排版]]></content>
      <categories>
        <category>学习小结</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML 初解]]></title>
    <url>%2FMyBlogs%2F2015%2F04%2F25%2FHTML%E5%88%9D%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[HTMLHTML是什么 HTML 指的是超文本标记语言 (Hyper Text Markup Language) HTML 不是一种编程语言，而是一种标记语言 (markup language) 标记语言是一套标记标签 (markup tag) HTML 使用标记标签来描述网页 通俗易懂的话就是：HTML不是编程语言，使用标记来描述（展示）网页的标记语言。（PS：网页专用啦） HTML基础HTML标签 标签也称之为标记，通常称为HTML标签 HTML 标签是由尖括号包围的关键词，比如 &lt;html&gt; HTML 标签通常是成对出现的，比如 &lt;b&gt; 和 &lt;/b&gt;；还有一些单标签，比如 &lt;input /&gt; 和 &lt;img /&gt; 标签对中的第一个标签是开始标签，第二个标签是结束标签 开始和结束标签也被称为开放标签和闭合标签 PS：HTML中标题很重要，是SEO做优化的地方，所以很重要，当然不仅仅因为SEO做优化就很重要啦，嗯，就是很重要。（0.-） 标题标签&lt;h1~h6&gt; &lt;/h1~h6&gt; &lt;h1&gt;我是标题一&lt;/h1&gt; &lt;h2&gt;我是标题二&lt;/h2&gt; &lt;h3&gt;我是标题三&lt;/h3&gt; &lt;h4&gt;我是标题四&lt;/h4&gt; &lt;h5&gt;我是标题五&lt;/h5&gt; &lt;h6&gt;我是标题六&lt;/h6&gt; explain:标题标签一般用于包裹标题文本，并设置有默认属性（加粗，不同的字号，独占一行）。 PS：HTML提供的标题标签总共有6个，从1开始到6结束，并且字号是从大到小 段落标签&lt;p&gt; &lt;/p&gt; &lt;p&gt;我是第一个段落&lt;/p&gt; &lt;p&gt;我是第二个段落&lt;/p&gt; explain：段落标签一般用于包裹内容文本，默认字体大小为浏览器字体大小，同样独占一行。 链接&lt;a href=””&gt; &lt;/a&gt; &lt;a href=&quot;www.baidu.com&quot;&gt;点我进入百度&lt;/a&gt; explain：链接标签用于包裹想定义跳转的文字和图片，默认属性href，值是你想跳转的url地址。 图像&lt;img src=”” alt=”” /&gt; &lt;img src=&quot;https://avatars0.githubusercontent.com/u/26076529?v=3&amp;u=02e97315a3c8b1fe9022529b1d0863f1129b1bed&amp;s=400&quot; alt=&quot;就是想让你看我头像&quot; /&gt; explain: 图像标签用于在网页中展示图片的标签，默认属性src用于加载图片地址，alt用于图像的描述。 PS：alt属性是SEO（搜索引擎优化）优化的地方 加粗&lt;b&gt; &lt;/b&gt;,&lt;strong&gt; &lt;/strong&gt; &lt;b&gt;我是加粗的文字&lt;/b&gt; &lt;strong&gt;同上&lt;/shtong&gt; explain: 这两个标签直接将文本包裹，会在页面上出现加粗的字体效果。 PS：当标签不够用时，可消除它的默认属性，用作于容器来使用。 倾斜&lt;i&gt; &lt;/i&gt;,&lt;em&gt; &lt;/em&gt; &lt;i&gt;我倾斜啦&lt;/i&gt; &lt;em&gt;好巧哦我也是&lt;/em&gt; explain: 这两个标签将文本包裹，会在页面上出现倾斜的文字效果。 PS：当标签不够用时，可消除它的默认属性，用作于容器来使用。 换行&lt;br /&gt; explain: 这是一个单标签，用于换行。 div&lt;div&gt; &lt;/div&gt; explain: 这个标签为一个容器，没有任何默认属性，配合css使用，来为自己的页面布局。 PS：这也被称为盒子模型 表单&lt;form&gt; &lt;/form&gt;,&lt;input /&gt;,&lt;select&gt; &lt;option&gt; &lt;/option&gt; &lt;/select&gt; &lt;form&gt; 我是一个可输入的文本框&lt;input type=&quot;text&quot; /&gt; 我是一个按钮&lt;input type=&quot;button&quot; /&gt; 我是一个提交按钮&lt;input type=&quot;submit&quot; /&gt; &lt;/form&gt; explain: form标签是一个简单的，可以与用户交互的，将用户输入的数据传输给后台的一个标签，是表单最外层标签。input标签是表单中的插件，默认的type属性为text，用户可在其中输入文本信息，select是下拉菜单最外层标签，默认属性name为设置下拉菜单的名称，option为下拉菜单中的分类，用于包裹分类内容。 PS：input常用的type属性值： text; (用于输入文本) password; (用于输入密码) button; (按钮) submit; (提交按钮) checkbox; (复选框) radio; (单选框) PS：在定义单选框的时候需将他们name属性设置为一样的值 reset; (重置按钮) 标签小结 标签分为单标签和双标签 双标签必须有结束标签，如：&lt;/&gt; 为了规范书写和不必要的BUG，在单标签后面也要加上 / ，如：&lt;input /&gt; 元素explain: HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。 元素语法 HTML 元素以开始标签起始 HTML 元素以结束标签终止 元素的内容是开始标签与结束标签之间的内容 某些 HTML 元素具有空内容（empty content） 空元素在开始标签中进行关闭（以开始标签的结束而结束） 大多数 HTML 元素可拥有属性 嵌套的 HTML 元素大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。HTML 文档由嵌套的 HTML 元素构成。 &lt;html&gt; &lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 上面的例子 html 标签中包含三个 HTML 元素(html , body , p)。 HTML 实例解释p 元素：&lt;p&gt;This is my first paragraph.&lt;/p&gt; 这个 &lt;p&gt; 元素定义了 HTML 文档中的一个段落。 这个元素拥有一个开始标签 &lt;p&gt;，以及一个结束标签 &lt;/p&gt;。 元素内容是：This is my first paragraph。 body 元素：&lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt; &lt;/body&gt; &lt;body&gt; 元素定义了 HTML 文档的主体。 这个元素拥有一个开始标签 &lt;body&gt;，以及一个结束标签 &lt;/body&gt;。 元素内容是另一个 HTML 元素（p 元素）。 html 元素：&lt;html&gt; &lt;body&gt; &lt;p&gt;This is my first paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; &lt;html&gt; 元素定义了整个 HTML 文档。 这个元素拥有一个开始标签 &lt;html&gt;，以及一个结束标签 &lt;/html&gt;。 元素内容是另一个 HTML 元素（body 元素）。 小结 简而言之，元素就是放在开始标签和结束标签的代码 学习小结 html是超文本标记语言 标签都有默认属性 标签有双标签和单标签 都有结束符号：/ 开始标签和结束标签之间的代码为元素 自我总结第一次写自己的博客，正式成为一只前端的小程序猿啦，感觉自己有点小兴奋啊。知识点有自己的，也有w3school的。我只是搬过来用用啦，别介！（-.0）。附w3school地址：http://www.w3school.com.cn]]></content>
      <categories>
        <category>学习小结</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FMyBlogs%2F2015%2F04%2F21%2FHello-World%2F</url>
    <content type="text"><![CDATA[Hello World我的hexo第一天]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>